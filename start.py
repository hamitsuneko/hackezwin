import os
from dotenv import load_dotenv
import telebot
from PyPDF2 import PdfReader
from openai import OpenAI
import csv
import re
from io import StringIO

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
TG_TOKEN = '7594440289:AAGJm4XlDWsS89OkpstGGWYe7WLpt0bFWiU'
bot = telebot.TeleBot(TG_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI API
load_dotenv() 
client=OpenAI(
    api_key=os.getenv("OPENAI_API_KEY")
)
def clean_text(text):
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –æ–±—ã—á–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏, —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –ø—Ä–æ–±–µ–ª–∞–º–∏
    cleaned_text = re.sub(r'[^\w\s,;.:]', '', text)  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, —Ü–∏—Ñ—Ä—ã –∏ –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–∫–∏
    cleaned_text = ' '.join(cleaned_text.split())  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    return cleaned_text
def generate_table_from_instruction(text, instructions):
    text=clean_text(text)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    prompt = f"""
        –í–æ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:{instructions}
        –í–æ—Ç –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —á—Ç–æ –Ω—É–∂–Ω–æ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç (–Ω–µ —Å–º—É—â–∞–π—Å—è –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–æ–≤–µ—Ç —ç—Ç–æ —Ñ–∞–π–ª–æ–º): {text}
    """

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
        completion = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        table = completion.choices[0].message.content.strip()
        print("–û—Ç–≤–µ—Ç –æ—Ç OpenAI:", table)  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        return table
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        raise

def extract_text_from_pdf(pdf_file):
    reader = PdfReader(pdf_file)
    text = ""
    for page in reader.pages:
        textfrompage = page.extract_text()
        cleartext= clean_text(textfrompage)
        text += cleartext
    return text
def generate_dynamic_prompt(text, instruction):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    prompt="notfile"
    if instruction is None:
        # –ï—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –ø–µ—Ä–µ—Å–∫–∞–∑, –≤—ã–≤–æ–¥–∏–º –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å
        prompt = f"""
        –ò–∑–≤–ª–µ–∫–∏ —Ç–∞–±–ª–∏—Ü—É —Å –¥–≤—É–º—è –∫–æ–ª–æ–Ω–∫–∞–º–∏: –°–∏–º–ø—Ç–æ–º—ã –∏ –î–∏–∞–≥–Ω–æ–∑. –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
        - –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∫–æ–ª–æ–Ω–æ–∫ ‚Äî —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π (;).
        - –ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤, –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –∫–∞–≤—ã—á–µ–∫, –ª–∏—à–Ω–∏–µ —Ç–æ–∂–µ —É–±–µ—Ä–∏.
        - –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.
        - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–∞–≤—ã—á–∫–∏ (–¥–≤–æ–π–Ω—ã–µ –∏–ª–∏ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ) –Ω–∏ –≤–æ–∫—Ä—É–≥ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ.
        - –ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ —Å–∏–º–ø—Ç–æ–º–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Ç–∞–∫ –∂–µ –∫–∞–∫ –∏ –¥–∏–∞–≥–Ω–æ–∑–æ–≤

        –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞:  
        –°–∏–º–ø—Ç–æ–º—ã;–î–∏–∞–≥–Ω–æ–∑  
        –°–∏–º–ø—Ç–æ–º1,—Å–∏–º–ø—Ç–æ–º2,—Å–∏–º–ø—Ç–æ–ºN;–î–∏–∞–≥–Ω–æ–∑
        –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –ª–∏—Ö–æ—Ä–∞–¥–∫–∞;–ì—Ä–∏–ø–ø  

        –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {text}

        """
    else:
        if '—Ç–∞–±–ª–∏—Ü—É' in instruction.lower():
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            match = re.search(r'—Å—Ç–æ–ª–±—Ü—ã: (.+)', instruction.lower())
            if match:
                columns = match.group(1).strip()  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
                columns_list = [col.strip().capitalize() for col in columns.split(',')]  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –≤ —Å–ø–∏—Å–æ–∫
                columns_str = ';'.join(columns_list)  # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è CSV

                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
                prompt = f"""
                –ò–∑–≤–ª–µ–∫–∏ —Ç–∞–±–ª–∏—Ü—É —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: {columns_str}. –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
                - –ü–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å CSV.
                - –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∫–æ–ª–æ–Ω–æ–∫ ‚Äî —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π (;).
                - –ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤, –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –∫–∞–≤—ã—á–µ–∫.
                - –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.
                - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–∞–≤—ã—á–∫–∏ (–¥–≤–æ–π–Ω—ã–µ –∏–ª–∏ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ) –Ω–∏ –≤–æ–∫—Ä—É–≥ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ.

                –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞:
                CSV:
                {columns_str}
                –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü;–≤—Ç–æ—Ä–æ–π;—Ç—Ä–µ—Ç–∏–π
                –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞;–≤—Ç–æ—Ä–æ–≥–æ;—Ç—Ä–µ—Ç—å–µ–≥–æ

                –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {text}
                """
        elif "–ø–µ—Ä–µ—Å–∫–∞–∑" in instruction.lower() or "—Ä–µ–∑—é–º–∏—Ä—É–π" in instruction.lower():
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –ø–µ—Ä–µ—Å–∫–∞–∑–∞
            match = re.search(r'\d+', instruction)
            number = match.group(0) if match else 1  # –ï—Å–ª–∏ —á–∏—Å–ª–æ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –∏–Ω–∞—á–µ None
            prompt = f"""
            –°–æ—Å—Ç–∞–≤—å –ø–µ—Ä–µ—Å–∫–∞–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ {number} —Å—Ç—Ä–∞–Ω–∏—Ü. 
            –ü–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å TXT, –∞ –∑–∞—Ç–µ–º, –Ω–∞—á–∏–Ω–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –ø–µ—Ä–µ—Å–∫–∞–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ {number} –°—Ç—Ä–∞–Ω–∏—Ü –ê4.

            –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {text}
            """
    return prompt
def generate_table_from_text(text, instructions):
    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ OpenAI
    #–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É—Å—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    prompt = generate_dynamic_prompt(text, instructions)

    completion = client.chat.completions.create(
    model="gpt-4o-mini",
    messages=[{"role": "user", "content": prompt, "temperature": 0.7}]
    )
    table = completion.choices[0].message.content.strip()
    
    print("–û—Ç–≤–µ—Ç –æ—Ç OpenAI:", table)  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç

    return table
    

   

def save_table_to_csv(table, filename="output.csv"):
    if not table:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None –∏–ª–∏ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        raise ValueError("–ü–æ–ª—É—á–µ–Ω–∞ –ø—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∏–ª–∏ None.")
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    lines = table.split("\n")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    data = []
    for line in lines:
        if line.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã –ø–æ —Ç–∞–±—É–ª—è—Ü–∏–∏ (–∏–ª–∏ –¥—Ä—É–≥–æ–º—É —Å–∏–º–≤–æ–ª—É)
            columns = line.split("\t")
            data.append(columns)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ CSV
    max_columns = max(len(columns) for columns in data)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∞—Ö
    for i in range(len(data)):
        while len(data[i]) < max_columns:  # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–æ–∫ –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ, –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            data[i].append("")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
    with open(filename, mode="w+", newline="", encoding="utf-8") as file:
        writer = csv.writer(file, quoting=csv.QUOTE_NONE, escapechar=' ', delimiter=';')
        writer.writerows(data)
    
    print(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ {filename}")
    return filename
@bot.message_handler(commands=['start'])
def handle_start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    bot.send_message(
        message.chat.id, 
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ PDF –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Ö. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "1Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª(–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!).\n"
        "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞. –°–æ–≤–µ—Ç—É—é —Ç–∞–∫ –∂–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π /help.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥!"
    )
@bot.message_handler(commands=['help'])
def handle_help(message):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    bot.send_message(message.chat.id,
                     """–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç –∏ –∫–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã:\n\n
–ü—Ä–∏–º–µ—Ä –ª–æ–≥–∏—á–µ—Å–∫–æ–π —Ü–µ–ø–æ—á–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:\n
üìÇ 1Ô∏è‚É£ –í—ã –∑–∞–≥—Ä—É–∂–∞–µ—Ç–µ PDF —Ñ–∞–π–ª (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!).\n
üíæ 2Ô∏è‚É£ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –æ–Ω –æ—Å—Ç–∞–≤–∞–ª—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π.\n
üîÑ 3Ô∏è‚É£ –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤–∏–∑–∏—Ç–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å —Ç–µ–º –∂–µ —Ñ–∞–π–ª–æ–º ‚Äî –æ–Ω —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n \n 
‚öôÔ∏è –ß—Ç–æ–±—ã –±–æ—Ç –≤–µ—Ä–Ω—É–ª –≤–∞–º —Ç–∞–±–ª–∏—Ü—É CSV –≤–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤ —á–∞—Ç —Å–ª–µ–¥—É—é—â–µ–µ "–í—ã–≤–µ–¥–∏ —Ç–∞–±–ª–∏—Ü—É –ø–æ–¥–µ–ª–µ–Ω–Ω—É—é –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã: –°—Ç–æ–ª–±–µ—Ü1, —Å—Ç–æ–ª–±–µ—Ü2, —Å—Ç–æ–ª–±–µ—ÜN" \n 
‚öôÔ∏è –ß—Ç–æ–±—ã –±–æ—Ç —Å–¥–µ–ª–∞–ª –≤–∞–º –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑ —Ñ–∞–π–ª–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å "–ø–µ—Ä–µ—Å–∫–∞–∑" –∏–ª–∏ "—Ä–µ–∑—é–º–∏—Ä—É–π".\n
üòå –í –æ—Å—Ç–∞–ª—å–Ω–æ–º –º–æ–∂–µ—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ –ø–∏—Å–∞—Ç—å –ª—é–±–æ–π –∑–∞–ø—Ä–æ—Å –∏ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º —Ç–∞–∫, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å–º–æ–∂–µ—Ç:)""")

@bot.message_handler(content_types=['document', 'text'])
def handle_message(message):
    if message.content_type == 'document':  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç
        if message.document.mime_type == 'application/pdf':  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ PDF
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞ –¥–∏—Å–∫
            with open("temp.pdf", "wb") as f:
                f.write(downloaded_file)

            bot.send_message(message.chat.id, "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞.")
        else:
            bot.send_message(message.chat.id, "–≠—Ç–æ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF.")

    elif message.content_type == 'text':  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
        text_message = message.text.strip()
        if text_message:
            if os.path.exists("temp.pdf"):
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ PDF
                text = extract_text_from_pdf("temp.pdf")

                instructions = text_message
                bot.send_message(message.chat.id, f"–°–µ–π—á–∞—Å –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à—É –ø—Ä–æ—Å—å–±—É: '\n{instructions}'")
                filechoiser=generate_dynamic_prompt(text, instructions)
                if(filechoiser!="notfile"):#–ï—Å–ª–∏ —Ñ–∞–π–ª
                    print("TXT OR CSV")
                    answer = generate_table_from_text(text, instructions)
                    if answer.startswith("CSV"):
                        answer = re.sub(r'^[^\n]*\n', '', answer)
                        csv_filename = "output.csv"
                        save_table_to_csv(answer, filename=csv_filename)
                        with open(csv_filename, "rb") as csv_file:
                            bot.send_document(message.chat.id, csv_file, caption="–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV.")
                    elif answer.startswith("TXT"):
                        txt_filename = "output.txt"
                        answer = re.sub(r'^[^\n]*\n', '', answer)
                        with open(txt_filename, "w", encoding="utf-8") as txt_file:
                            txt_file.write(answer)
                        with open(txt_filename, "rb") as txt_file:
                            bot.send_document(message.chat.id, txt_file, caption="–í–∞—à —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")

                else:
                    answer = generate_table_from_instruction(text, instructions)
                    if answer.startswith("CSV"):
                        csv_filename = "output.csv"
                        save_table_to_csv(answer, filename=csv_filename)
                        with open(csv_filename, "rb") as csv_file:
                            bot.send_document(message.chat.id, csv_file, caption="–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV.")
                    elif answer.startswith("TXT"):
                        txt_filename = "output.txt"
                        with open(txt_filename, "w", encoding="utf-8") as txt_file:
                            txt_file.write(answer)
                        with open(txt_filename, "rb") as txt_file:
                            bot.send_document(message.chat.id, txt_file, caption="–í–∞—à —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
                    else:
                        bot.send_message(message.chat.id, answer)
            else:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª.")
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    else:
        bot.send_message(message.chat.id, "–≠—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ PDF.")


    
bot.polling()
